var mongoose = require("mongoose");

// 连接字符串格式为mongodb://主机/数据库名
mongoose.connect('mongodb://localhost/test');
// 数据库连接后，可以对open和error事件指定监听函数。
var db = mongoose.connection;
db.on('error', console.error);
db.once('open', function() {
  console.log('连接成功')
    //在这里创建你的模式和模型
});
var Schema = mongoose.Schema;
var userSchema = new Schema({
	username : String,
	password : String
});

//var dao = function() {
	var User = mongoose.model('User', userSchema);
	
	var findUserByName = function(userName, callback) {
		//var myUser = null;
		console.log('looking for user: ' + userName);
		User.findOne({username : userName}, function(err, user) {
    		if (err) {
        		console.log(err);
    		}
    		else if (user) {
    			console.log('got user ' + user.username);
    			//myUser = user;
    		}
    		else {
    			console.log(userName + ' not exist');
    			//user = 0;
    		}
    		if (typeof(callback) == 'function')
    			callback(err, user);	
    	});
    	//return myUser;
	};

	var addUser = function(user, callback) {
		findUserByName(user.username, function(err, userInDb) {
			if (err) {
				if (typeof(callback) == 'function')
					callback(err, -1);
				return;
			}
			if (userInDb) {
				if (typeof(callback) == 'function')
					callback(null, 0);
				return;
			} 
			var u = new User(user);
			u.save(function(err) {
		    	if (err) {
		        	console.log('save failed');
		        	if (typeof(callback) == 'function')
		        		callback(err, -1);
		    	}
		    	else {
		    		console.log('addNew success');
		    	}
		    	if (typeof(callback) == 'function')
		    		callback(null, 1);
			});
		});
		
	};

	var checkUser = function(user, callback) {
		findUserByName(user.username, function(err, userInDb) {
			if (err) {
				if (typeof(callback) == 'function')
					callback(err, 1);
				return;
			} 
			if (!userInDb) {
				if (typeof(callback) == 'function')
					callback(null, 0);
				return;
			}
			if (user.password == userInDb.password) {
				if (typeof(callback) == 'function')
					callback(null, 1); // password correct
				console.log('user: ' + user.username + ' passes');
				return;
			}
			else {
				console.log('user: ' + user.username + ' fails to pass');
				if (typeof(callback) == 'function')
					callback(null, 2);  // password wrong
				return;
			}
		});			
	};
//};

// friend
var friendSchema = new Schema({
	from : String,
	to : String
	//newMessage : Boolean,
	//date : {type : Date, default : Date.now}
});
var Friend = mongoose.model('Friend', friendSchema);
// return friend status
//-0: not friends
// 1: are friends
var checkFriendStatus = function(user1, user2, callback) {
	findUserByName(user1, function(err, u1) {
		if (err){
			if (callback)
				callback(err, null);
			return;
		}
		else {
			if (u1) {
				findUserByName(user2, function(err, u2) {
					if (err){
						if (callback)
							callback(err, null);
						return;
					}
					else {
						if (u2) {
							Friend.findOne({$or: [{from : user1, to : user2}, {from : user2, to : user1}]}, function(err, friendPair) {
								if (err) {
									console.log(err);
									if (callback)
										callback(err, null);
									return;
								}
								if (friendPair) {
									if (callback)
										callback(null, 1);
								}
								else {
									if (callback)
										callback(null, 0);
								}
							});
						}
						else {
							if (callback)
								callback(null, 0);
						}	
					}
				});
			}
			else {
				if (callback)
					callback(null, 0);
			}
			
		}
	});
};

var addFriends = function(user1, user2, callback) {
	checkFriendStatus(user1, user2, function(err, result) {
		if (err) {
			if (callback)
				callback(err, null);
			return;
		}
		if (result == 0) {
			var f1 = new Friend({from : user1, to : user2});
			f1.save(function(err) {
				if (err) {
					console.log(err);
				}
				else {
					console.log('success: new friend pair added');
				}
				if (callback) {
					callback(err, 1);
				}
			});
		}
		else {
			console.log('fail: friend pair already exists');
			if (callback)
				callback(null, 0);
		}

	});
};

var deleteFriends = function(user1, user2, callback) {
	Friend.remove({$or: [{from : user1, to : user2}, {from : user2, to : user1}]}, function(err) {
		if (err) {
			console.log(err);
			if (typeof(callback) == 'function')
				callback(err, -1);
		}
		else {
			if (typeof(callback) == 'function')
				callback(null, 1);
		}
	});
}

var friendReqSchema = new Schema({
	from : String,
	to : String,
	msg : {type : String, default : 'hello'}
	//accepted : Boolean
});
var FriendReq = mongoose.model('FriendReq', friendReqSchema);

var newFriendReq = function(friendReq, callback) {
	var from = friendReq.from;
	var to = friendReq.to;
	checkFriendStatus(from, to, function(err, result) {
		if (err) {
			callback(err, null);
		}
		else {
			if (result == 0) {
				var friendReq = new FriendReq(friendReq);
				friendReq.save(function(err) {
					callback(err, 1);
				});
			}
			else {
				callback(null, 0);
			}
		}
	});
	
};

var refuseFriendReq = function(from, to, callback) {
	console.log('try to remove friend req: ');
	FriendReq.remove({$or: [{from : from, to : to}, {from : to, to : from}]}, function(err) {
		if (err) {
			console.log(err);
		}
		else {
			console.log('removed');
		}
		if (callback)
			callback(err);
	});
};

var acceptFriendReq = function(from, to, callback) {
	console.log('try to accept friend req: ');
	FriendReq.findOne({from : from, to : to}, function(err, data) {
		if (err) {
			if (callback)
				callback(err, null);
			return;
		}
		if (data) {
			console.log('friend req exists, try to add friend piar');
			addFriends(from, to, function(err, result) {
				if (err) {
					if (callback)
						callback(err, null);
				}
				else {
					console.log('try to remove friend req');
					FriendReq.remove({$or: [{from : from, to : to}, {from : to, to : from}]}, function(err) {
						if (err) {
							console.log(err);
						}
						else {
							console.log('removed');
						}
						if (callback)
							callback(err, result);
					});
				}
			});
			
		}
		else {
			console.log('friend req not exist');
			if (callback)
				callback(null, 0);
		}
	});
} 

var getFriendReqs = function(user, callback) {
	var friendReqs = [];
	FriendReq.find({to : user}, function(err, data) {
		if (err) {
			console.log(err);
		}
		else {
			for (pair in data) {
				friendReqs.push(pair.from);
			}
			console.log(user + ' has ' + data.length + ' requests');
		}
		if (typeof(callback) == 'function')
			callback(err, friendReqs);
	});
}

var getFriendList = function(user, callback) {
	var friendList = [];
	Friend.find({to : user}, function(err, data) {
		if (err) {
			console.log(err);
		}
		else {
			for (pair in data) {
				if (pair.to == user)
					friendList.push(pair.from);
				else
					friendList.push(pair.to);
			}
			friendList = friendList.sort();
			console.log(user + ' has ' + data.length + ' friends');
		}
		if (typeof(callback) == 'function')
			callback(err, friendList);
	});
}
// message
var messageSchema = new Schema({
	from : String,
	to : String,
	date : {type : Date, default : Date.now},
	content : {type : String, default : ' '}
});
var Message = mongoose.model('Message', messageSchema);
var saveMessage = function(message, callback) {
	var mes = new Message(message);
	mes.save(callback);
};

var getMessagesByUser = function(from, to, callback) {
	var query = null;
	
	if (from) {
		query = {from : from, to : to};
	}
	else {
		query = {to : to};
	}
	Message.find(query, function(err, list) {
		if (err) {
			console.log(err);
		}
		else {
			retList = list;
		}
		if (callback)
			callback(err, list);
	});
};

var deleteMessagesByUser = function(from, to, callback) {
	Message.remove({from : from, to : to}, callback);
}

module.exports.user = User;
module.exports.user.addNew = addUser;
module.exports.user.findByName = findUserByName;
module.exports.user.check = checkUser;

module.exports.friend = Friend;
module.exports.friend.checkStatus = checkFriendStatus;
module.exports.friend.add = addFriends;
module.exports.friend.deletePair = deleteFriends;
module.exports.friend.acceptReq = acceptFriendReq;
module.exports.friend.refuseReq = refuseFriendReq;
module.exports.friend.requset = newFriendReq;
module.exports.friend.getReqs = getFriendReqs;
module.exports.friend.getList = getFriendList;

module.exports.message = Message;
module.exports.message.save = saveMessage;
module.exports.message.getByUser = getMessagesByUser;
module.exports.message.deleteByUser = deleteMessagesByUser;
//exports.addUser = addUser;
//exports.findUserByName = findUserByName;
//exports.checkUser = checkUser;

//exports.checkFriendStatus = checkFriendStatus;
//exports.addFriends = addFriends;
//exports.updateFriendStatus = updateFriendStatus;
//exports.deleteFriends = deleteFriends;